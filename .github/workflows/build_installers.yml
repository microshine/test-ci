name: Upload Release Asset
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  linux:
    name: Upload Linux files
    runs-on: ubuntu-18.04
    steps:
      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2.0.2
        with:
          key: ${{ secrets.SSH_KEY }}
          name: id_rsa # optional
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
      - name: Checkout
        run: git clone git@github.com:microshine/ejbca-client.git --depth 1
      - name: Upload files to artifacts
        uses: actions/upload-artifact@v1
        with:
          name: installers
          path: ejbca-client/LICENSE
  macos:
    name: Upload MAC files
    runs-on: macos-10.15
    steps:
      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2.0.2
        with:
          key: ${{ secrets.SSH_KEY }}
          name: id_rsa # optional
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
      - name: Checkout
        run: git clone git@github.com:microshine/ejbca-client.git --depth 1
      - name: Upload files to artifacts
        uses: actions/upload-artifact@v1
        with:
          name: installers
          path: ejbca-client/README.md
  create_release:
    name: Create Release
    runs-on: ubuntu-18.04
    needs: [macos, linux]
    steps:
      - name: Download math result for job 2
        uses: actions/download-artifact@v1
        with:
          name: installers
      - name: Create Release
        uses: actions/github-script@v2
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs').promises;
            
            const { repo: { owner, repo }, sha } = context;
            console.log({ owner, repo, sha });

            const release = await github.repos.createRelease({
              owner, repo,
              tag_name: process.env.GITHUB_REF,
              draft: true,
              target_commitish: sha
            });
        
            for (let file of await fs.readdir('installers')) {
              console.log('uploading', file);

              await github.repos.uploadReleaseAsset({
                owner, repo,
                release_id: release.data.id,
                name: file,
                data: await fs.readFile(`./installers/${file}`)
              });            
            }